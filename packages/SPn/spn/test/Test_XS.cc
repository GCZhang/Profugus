//----------------------------------*-C++-*----------------------------------//
/*!
 * \file   SPn/spn/test/Test_XS.cc
 * \author Thomas M. Evans
 * \date   Fri Oct 19 12:41:28 2012
 * \brief  Cross-sections for testing.
 * \note   Copyright (C) 2014 Oak Ridge National Laboratory, UT-Battelle, LLC.
 */
//---------------------------------------------------------------------------//

#include "harness/DBC.hh"
#include "Test_XS.hh"

//---------------------------------------------------------------------------//
// 12 Group Cross Sections
//---------------------------------------------------------------------------//
// See scripts/12gp.py for generating script.  This is a 12-group version of
// the LANCR 23 group cross sections for a single-pin 2x2 homogenized mesh
// (UO2 + moderator).

namespace twelve_grp
{

// Totals.
double T[12] = {    0.260176,    0.655699,    1.027580,    1.092943,
                    1.116513,    1.007418,    1.027910,    1.052385,
                    1.162511,    1.559925,    2.223012,    3.720265};

// P0
double S0[12][12] = {
    {    0.174784,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000},
    {    0.081108,    0.570026,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000},
    {    0.000428,    0.082758,    0.867571,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000},
    {    0.000001,    0.000142,    0.041753,    0.313592,
         0.000000,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000},
    {    0.000001,    0.000102,    0.027470,    0.232171,
         0.335445,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000},
    {    0.000001,    0.000174,    0.047064,    0.301282,
         0.455772,    0.488873,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000},
    {    0.000000,    0.000082,    0.022159,    0.141848,
         0.193190,    0.412020,    0.642497,    0.009778,
         0.000001,    0.000000,    0.000000,    0.000000},
    {    0.000000,    0.000002,    0.000549,    0.003517,
         0.004790,    0.009813,    0.055322,    0.246392,
         0.001160,    0.000000,    0.000000,    0.000000},
    {    0.000000,    0.000010,    0.002747,    0.017584,
         0.023949,    0.049066,    0.237021,    0.648727,
         0.769181,    0.017633,    0.000534,    0.000371},
    {    0.000000,    0.000002,    0.000513,    0.003282,
         0.004471,    0.009159,    0.039690,    0.089925,
         0.280122,    1.073698,    0.215132,    0.123841},
    {    0.000000,    0.000001,    0.000183,    0.001172,
         0.001597,    0.003271,    0.010451,    0.020464,
         0.054153,    0.334538,    1.696307,    0.976522},
    {    0.000000,    0.000000,    0.000036,    0.000234,
         0.000319,    0.000654,    0.001278,    0.001599,
         0.003913,    0.020097,    0.087041,    2.069715}};

// P1
double S1[12][12] = {
    {    0.081897,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000},
    {    0.027905,    0.266460,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000},
    {    0.000026,    0.004849,    0.393449,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000},
    {    0.000000,    0.000001,    0.035875,    0.071310,
         0.000000,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000},
    {    0.000000,    0.000001,    0.022868,    0.127110,
         0.025261,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000},
    {    0.000000,    0.000002,    0.029401,    0.174250,
         0.326458,    0.251279,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000},
    {    0.000000,    0.000001,    0.007564,    0.044638,
         0.088204,    0.236056,    0.275697,    0.006282,
         0.000000,    0.000000,    0.000000,    0.000000},
    {    0.000000,    0.000000,    0.000098,    0.000572,
         0.001125,    0.003089,    0.017770,    0.132736,
         0.000354,    0.000000,    0.000000,    0.000000},
    {    0.000000,    0.000000,    0.000373,    0.002127,
         0.004167,    0.011394,    0.058985,    0.307893,
         0.347705,    0.004676,   -0.000029,   -0.000017},
    {    0.000000,    0.000000,    0.000040,    0.000207,
         0.000393,    0.001046,    0.003404,    0.010105,
         0.074751,    0.391847,    0.008331,   -0.007204},
    {    0.000000,    0.000000,    0.000012,    0.000049,
         0.000086,    0.000211,    0.000443,   -0.000007,
         -0.003135,    0.011035,    0.329945,   -0.099767},
    {    0.000000,    0.000000,    0.000005,    0.000013,
         0.000018,    0.000031,    0.000048,   -0.000017,
         -0.000224,   -0.001294,   -0.009675,    0.244165}};

// P2
double S2[12][12] = {
    {    0.058401,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000},
    {    0.000680,    0.113785,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000},
    {   -0.000215,   -0.003393,    0.200455,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000},
    {   -0.000000,   -0.000013,    0.011669,    0.095380,
        0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000},
    {   -0.000000,   -0.000009,    0.000531,    0.089820,
        0.034395,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000},
    {   -0.000000,   -0.000016,   -0.014559,    0.026793,
        0.186069,    0.178125,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000},
    {   -0.000000,   -0.000007,   -0.013619,   -0.041921,
        -0.044603,    0.038187,    0.171170,    0.004798,
        0.000000,    0.000000,    0.000000,    0.000000},
    {   -0.000000,   -0.000000,   -0.000393,   -0.001483,
        -0.002203,   -0.003445,    0.001718,    0.096768,
        0.000271,    0.000000,    0.000000,    0.000000},
    {    0.000000,   -0.000001,   -0.002003,   -0.007736,
         -0.011809,   -0.020412,   -0.026796,    0.088298,
         0.162675,    0.000555,   -0.000037,   -0.000003},
    {    0.000000,   -0.000000,   -0.000381,   -0.001503,
         -0.002351,   -0.004398,   -0.008347,   -0.010639,
         -0.022023,    0.120889,   -0.010278,   -0.002254},
    {    0.000000,   -0.000000,   -0.000136,   -0.000541,
         -0.000851,   -0.001615,   -0.002740,   -0.000903,
         -0.003937,   -0.021877,    0.055774,   -0.040784},
    {    0.000000,    0.000000,   -0.000026,   -0.000107,
         -0.000169,   -0.000324,   -0.000535,   -0.000012,
         -0.000044,   -0.000383,   -0.003889,    0.044882}};

// P3
double S3[12][12] = {
    {    0.031451,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000,
         0.000000,    0.000000,    0.000000,    0.000000},
    {   -0.015317,    0.026422,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000},
    {   -0.000036,   -0.003204,    0.050217,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000},
    {   -0.000000,   -0.000002,   -0.005689,    0.079269,
        0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000},
    {   -0.000000,   -0.000001,   -0.011777,    0.035834,
        0.032982,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000},
    {   -0.000000,   -0.000003,   -0.026738,   -0.080618,
        0.039065,    0.106475,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000},
    {   -0.000000,   -0.000002,   -0.009809,   -0.052669,
        -0.085791,   -0.087272,    0.022518,    0.003692,
        0.000000,    0.000000,    0.000000,    0.000000},
    {   -0.000000,   -0.000000,   -0.000141,   -0.000824,
        -0.001541,   -0.003783,   -0.005665,    0.071585,
        0.000206,    0.000000,    0.000000,    0.000000},
    {   -0.000000,   -0.000000,   -0.000543,   -0.003130,
        -0.005901,   -0.015107,   -0.042410,   -0.024053,
        0.055027,   -0.000815,   -0.000005,    0.000000},
    {    0.000000,   -0.000000,   -0.000060,   -0.000311,
         -0.000578,   -0.001512,   -0.003830,   -0.003792,
         -0.022305,    0.030659,   -0.004525,   -0.000233},
    {    0.000000,   -0.000000,   -0.000018,   -0.000075,
         -0.000128,   -0.000311,   -0.000687,   -0.000085,
         -0.000374,   -0.009702,    0.008408,   -0.011961},
    {    0.000000,   -0.000000,   -0.000006,   -0.000019,
         -0.000026,   -0.000046,   -0.000077,   -0.000000,
         0.000000,   -0.000035,   -0.001018,    0.015181}};

//---------------------------------------------------------------------------//

Teuchos::RCP<profugus::Mat_DB> make_mat(int Pn,
                                        int Nc)
{
    using profugus::Mat_DB;

    // material db
    Teuchos::RCP<Mat_DB> mat = Teuchos::rcp(new Mat_DB);

    // make the cross sections
    Mat_DB::RCP_XS xs = Teuchos::rcp(new Mat_DB::XS_t);
    xs->set(Pn, 12);

    // totals
    Mat_DB::XS_t::OneDArray tot(&T[0], &T[0] + 12);
    xs->add(0, Mat_DB::XS_t::TOTAL, tot);

    double *sctxs[] = {&S0[0][0], &S1[0][0], &S2[0][0], &S3[0][0]};

    // scattering
    for (int n = 0; n <= Pn; ++n)
    {
        Mat_DB::XS_t::TwoDArray scat(12, 12, 0.0);
        const double *data = sctxs[n];
        for (int g = 0; g < 12; ++g)
        {
            for (int gp = 0; gp < 12; ++gp)
            {
                scat(g, gp) = data[gp + g * 12];
            }
        }

        xs->add(0, n, scat);
    }

    xs->complete();

    // set the mat
    mat->set(xs, Nc);
    for (int n = 0; n < Nc; ++n)
    {
        mat->matid(n) = 0;
    }

    return mat;
}

} // end namespace twelve_grp

//---------------------------------------------------------------------------//
// 3 Group Cross Sections
// ---------------------------------------------------------------------------//

namespace three_grp
{

// Totals.
double T[3] = {0.465755,    1.029767,    1.778717};

// P0
double S0[3][3] = {
    {    0.414422,    0.000000,    0.000000},
    {    0.048379,    0.936765,    0.000647},
    {    0.000003,    0.065932,    1.629835}};

// P1
double S1[3][3] = {
    {    0.188521,    0.000000,    0.000000},
    {    0.001869,    0.429809,    0.000078},
    {    0.000000,    0.018912,    0.274471}};

// P2
double S2[3][3] = {
    {    0.091115,    0.000000,    0.000000},
    {   -0.002307,    0.179859,    0.000059},
    {   -0.000000,   -0.012152,    0.036952}};

// P3
double S3[3][3] = {
    {    0.028591,    0.000000,    0.000000},
    {   -0.001495,    0.000200,    0.000036},
    {   -0.000000,   -0.010341,   -0.004489}};

//---------------------------------------------------------------------------//

Teuchos::RCP<profugus::Mat_DB> make_mat(int Pn,
                                        int Nc)
{
    using profugus::Mat_DB;

    // material db
    Teuchos::RCP<Mat_DB> mat = Teuchos::rcp(new Mat_DB);

    // make the cross sections
    Mat_DB::RCP_XS xs = Teuchos::rcp(new Mat_DB::XS_t);
    xs->set(Pn, 3);

    // totals
    Mat_DB::XS_t::OneDArray tot(&T[0], &T[0] + 3);
    xs->add(0, Mat_DB::XS_t::TOTAL, tot);

    double *sctxs[] = {&S0[0][0], &S1[0][0], &S2[0][0], &S3[0][0]};

    // scattering
    for (int n = 0; n <= Pn; ++n)
    {
        Mat_DB::XS_t::TwoDArray scat(3, 3, 0.0);
        const double *data = sctxs[n];
        for (int g = 0; g < 3; ++g)
        {
            for (int gp = 0; gp < 3; ++gp)
            {
                scat(g, gp) = data[gp + g * 3];
            }
        }

        xs->add(0, n, scat);
    }

    xs->complete();

    // set the mat
    mat->set(xs, Nc);
    for (int n = 0; n < Nc; ++n)
    {
        mat->matid(n) = 0;
    }

    return mat;
}

//---------------------------------------------------------------------------//

Teuchos::RCP<profugus::Mat_DB> make_mat(int                        Pn,
                                        const std::vector<int>    &matids,
                                        const std::vector<double> &f,
                                        const std::vector<int>    &cell2mid)
{
    using profugus::Mat_DB;

    REQUIRE(f.size() == matids.size());

    // material db
    Teuchos::RCP<Mat_DB> mat = Teuchos::rcp(new Mat_DB);

    // make the cross sections
    Mat_DB::RCP_XS xs = Teuchos::rcp(new Mat_DB::XS_t);
    xs->set(Pn, 3);

    for (int m = 0; m < matids.size(); ++m)
    {
        // make totals
        Mat_DB::XS_t::OneDArray tot(&T[0], &T[0] + 3);
        for (int g = 0; g < 3; ++g)
        {
            tot[g] *= f[m];
        }
        xs->add(matids[m], Mat_DB::XS_t::TOTAL, tot);

        double *sctxs[] = {&S0[0][0], &S1[0][0], &S2[0][0], &S3[0][0]};

        // scattering
        for (int n = 0; n <= Pn; ++n)
        {
            Mat_DB::XS_t::TwoDArray scat(3, 3, 0.0);
            const double *data = sctxs[n];
            for (int g = 0; g < 3; ++g)
            {
                for (int gp = 0; gp < 3; ++gp)
                {
                    scat(g, gp) = data[gp + g * 3] * f[m];
                }
            }

            xs->add(matids[m], n, scat);
        }
    }

    xs->complete();

    // set the mat
    mat->set(xs);
    mat->assign(cell2mid);

    return mat;
}

} // end of namespace three_grp

//---------------------------------------------------------------------------//
// 1 Group Cross Sections
// ---------------------------------------------------------------------------//

namespace one_grp
{

// Totals.
double T[1] = {1.0};

// P0
double S0[1][1] = {{0.4}};

// P1
double S1[1][1] = {{0.15}};

// P2
double S2[1][1] = {{0.09}};

// P3
double S3[1][1] = {{0.03}};

//---------------------------------------------------------------------------//

Teuchos::RCP<profugus::Mat_DB> make_mat(int Pn,
                                        int Nc)
{
    using profugus::Mat_DB;

    // material db
    Teuchos::RCP<Mat_DB> mat = Teuchos::rcp(new Mat_DB);

    // make the cross sections
    Mat_DB::RCP_XS xs = Teuchos::rcp(new Mat_DB::XS_t);
    xs->set(Pn, 1);

    // totals
    Mat_DB::XS_t::OneDArray tot(&T[0], &T[0] + 1);
    xs->add(0, Mat_DB::XS_t::TOTAL, tot);

    double *sctxs[] = {&S0[0][0], &S1[0][0], &S2[0][0], &S3[0][0]};

    // scattering
    for (int n = 0; n <= Pn; ++n)
    {
        Mat_DB::XS_t::TwoDArray scat(1, 1, 0.0);
        const double *data = sctxs[n];
        for (int g = 0; g < 1; ++g)
        {
            for (int gp = 0; gp < 1; ++gp)
            {
                scat(g, gp) = data[gp + g * 1];
            }
        }

        xs->add(0, n, scat);
    }

    xs->complete();

    // set the mat
    mat->set(xs, Nc);
    for (int n = 0; n < Nc; ++n)
    {
        mat->matid(n) = 0;
    }

    return mat;
}

//---------------------------------------------------------------------------//

Teuchos::RCP<profugus::Mat_DB> make_mat(int                        Pn,
                                        const std::vector<int>    &matids,
                                        const std::vector<double> &f,
                                        const std::vector<int>    &cell2mid)
{
    using profugus::Mat_DB;

    REQUIRE(f.size() == matids.size());

    // material db
    Teuchos::RCP<Mat_DB> mat = Teuchos::rcp(new Mat_DB);

    // make the cross sections
    Mat_DB::RCP_XS xs = Teuchos::rcp(new Mat_DB::XS_t);
    xs->set(Pn, 1);

    for (int m = 0; m < matids.size(); ++m)
    {
        // make totals
        Mat_DB::XS_t::OneDArray tot(&T[0], &T[0] + 1);
        for (int g = 0; g < 1; ++g)
        {
            tot[g] *= f[m];
        }
        xs->add(matids[m], Mat_DB::XS_t::TOTAL, tot);

        double *sctxs[] = {&S0[0][0], &S1[0][0], &S2[0][0], &S3[0][0]};

        // scattering
        for (int n = 0; n <= Pn; ++n)
        {
            Mat_DB::XS_t::TwoDArray scat(1, 1, 0.0);
            const double *data = sctxs[n];
            for (int g = 0; g < 1; ++g)
            {
                for (int gp = 0; gp < 1; ++gp)
                {
                    scat(g, gp) = data[gp + g * 1] * f[m];
                }
            }

            xs->add(matids[m], n, scat);
        }
    }

    xs->complete();

    // set the mat
    mat->set(xs);
    mat->assign(cell2mid);

    return mat;
}

} // end namespace one_grp

//---------------------------------------------------------------------------//
// 2 Group Cross Sections
// ---------------------------------------------------------------------------//

namespace two_grp
{

// Totals.
double T[2] = {1.5, 1.7};

// P0
double S0[2][2] = {{1.0, 0.0},
                   {0.5, 1.5}};

// P1
double S1[2][2] = {{0.15, 0.0},
                   {0.01, 0.14}};

// P2
double S2[2][2] = {{ 0.09, 0.0},
                   {-0.02, 0.08}};

// P3
double S3[2][2] = {{ 0.03, 0.0},
                   {-0.01, 0.04}};

//---------------------------------------------------------------------------//

Teuchos::RCP<profugus::Mat_DB> make_mat(int Pn,
                                        int Nc)
{
    using profugus::Mat_DB;

    // material db
    Teuchos::RCP<Mat_DB> mat = Teuchos::rcp(new Mat_DB);

    // make the cross sections
    Mat_DB::RCP_XS xs = Teuchos::rcp(new Mat_DB::XS_t);
    xs->set(Pn, 2);

    // totals
    Mat_DB::XS_t::OneDArray tot(&T[0], &T[0] + 2);
    xs->add(0, Mat_DB::XS_t::TOTAL, tot);

    double *sctxs[] = {&S0[0][0], &S1[0][0], &S2[0][0], &S3[0][0]};

    // scattering
    for (int n = 0; n <= Pn; ++n)
    {
        Mat_DB::XS_t::TwoDArray scat(2, 2, 0.0);
        const double *data = sctxs[n];
        for (int g = 0; g < 2; ++g)
        {
            for (int gp = 0; gp < 2; ++gp)
            {
                scat(g, gp) = data[gp + g * 2];
            }
        }

        xs->add(0, n, scat);
    }

    xs->complete();

    // set the mat
    mat->set(xs, Nc);
    for (int n = 0; n < Nc; ++n)
    {
        mat->matid(n) = 0;
    }

    return mat;
}

//---------------------------------------------------------------------------//

Teuchos::RCP<profugus::Mat_DB> make_mat(int                        Pn,
                                        const std::vector<int>    &matids,
                                        const std::vector<double> &f,
                                        const std::vector<int>    &cell2mid)
{
    using profugus::Mat_DB;

    REQUIRE(f.size() == matids.size());

    // material db
    Teuchos::RCP<Mat_DB> mat = Teuchos::rcp(new Mat_DB);

    // make the cross sections
    Mat_DB::RCP_XS xs = Teuchos::rcp(new Mat_DB::XS_t);
    xs->set(Pn, 2);

    for (int m = 0; m < matids.size(); ++m)
    {
        // make totals
        Mat_DB::XS_t::OneDArray tot(&T[0], &T[0] + 2);
        for (int g = 0; g < 2; ++g)
        {
            tot[g] *= f[m];
        }
        xs->add(matids[m], Mat_DB::XS_t::TOTAL, tot);

        double *sctxs[] = {&S0[0][0], &S1[0][0], &S2[0][0], &S3[0][0]};

        // scattering
        for (int n = 0; n <= Pn; ++n)
        {
            Mat_DB::XS_t::TwoDArray scat(2, 2, 0.0);
            const double *data = sctxs[n];
            for (int g = 0; g < 2; ++g)
            {
                for (int gp = 0; gp < 2; ++gp)
                {
                    scat(g, gp) = data[gp + g * 2] * f[m];
                }
            }

            xs->add(matids[m], n, scat);
        }
    }

    xs->complete();

    // set the mat
    mat->set(xs);
    mat->assign(cell2mid);

    return mat;
}

} // end namespace two_grp

//---------------------------------------------------------------------------//
//                 end of Test_XS.cc
//---------------------------------------------------------------------------//
